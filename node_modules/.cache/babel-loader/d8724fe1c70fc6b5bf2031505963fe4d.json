{"ast":null,"code":"// https://github.com/rafgraph/fractal\n// this code may be freely distributed under the GNU GPL v3 copyleft licence\n(function () {\n  'use strict';\n\n  if (typeof window.mandelbrotFractal == \"undefined\") {\n    window.mandelbrotFractal = {};\n  }\n\n  window.mandelbrotFractal.Fractal = Fractal;\n\n  function Fractal(canvas) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext(\"2d\");\n    this.cords = {};\n    this.maxEscapeTime = 0;\n    this.startCords = {};\n    this.startMaxEscapeTime = 0;\n    this.setToDefaults();\n    this.alignCordsToCanvasRatio();\n  }\n\n  Fractal.prototype.update = function (options) {\n    var previousSettings = this.copyCurrentSettings();\n    if (options.defaults) this.setToDefaults(); // true/false\n\n    if (options.resetToDefaultCords) this.resetToDefaultCords(); // true/false\n\n    if (options.resetCords) this.setCords(this.startCords); // true/false\n\n    if (options.cords) this.setCords(options.cords);\n    if (options.resetMaxEscapeTime) this.setMaxEscapeTime(this.startMaxEscapeTime); // true/false\n\n    if (options.maxEscapeTime) this.setMaxEscapeTime(options.maxEscapeTime);\n    if (options.zoomInPxPoint) this.zoomInPxPoint(options.zoomInPxPoint);\n    if (options.zoomOutPxPoint) this.zoomOutPxPoint(options.zoomOutPxPoint);\n    if (options.zoomInPxBox) this.zoomInPxBox(options.zoomInPxBox);\n    if (options.setAsStartingOptions) this.setStartingOptions(); // true/false\n\n    if (options.pxWidth && Math.floor(options.pxWidth) !== this.canvas.width) this.canvas.width = options.pxWidth;\n    if (options.pxHeight && Math.floor(options.pxHeight) !== this.canvas.height) this.canvas.height = options.pxHeight;\n    if (!options.distortion) this.alignCordsToCanvasRatio(); // by default this will run\n\n    if (this.reDrawRequired(previousSettings)) this.draw();\n  };\n\n  Fractal.prototype.copyCurrentSettings = function () {\n    return {\n      cords: JSON.parse(JSON.stringify(this.cords)),\n      maxEscapeTime: this.maxEscapeTime,\n      canvasWidth: this.canvas.width,\n      canvasHeight: this.canvas.height\n    };\n  };\n\n  Fractal.prototype.reDrawRequired = function (previousSettings) {\n    if (previousSettings.maxEscapeTime === this.maxEscapeTime && previousSettings.canvasWidth === this.canvas.width && previousSettings.canvasHeight === this.canvas.height && previousSettings.cords.xCartMin === this.cords.xCartMin && previousSettings.cords.xCartMax === this.cords.xCartMax && previousSettings.cords.yCartMin === this.cords.yCartMin && previousSettings.cords.yCartMax === this.cords.yCartMax) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  Fractal.prototype.setToDefaults = function () {\n    this.resetToDefaultCords();\n    this.maxEscapeTime = 224;\n    this.setStartingOptions();\n  };\n\n  Fractal.prototype.resetToDefaultCords = function () {\n    this.setCords({\n      xCartMin: -2.1,\n      xCartMax: 0.8,\n      yCartMin: -1.2,\n      yCartMax: 1.2\n    });\n    this.startCords = JSON.parse(JSON.stringify(this.cords));\n  };\n\n  Fractal.prototype.setCords = function (cords) {\n    var properties = ['xCartMin', 'xCartMax', 'yCartMin', 'yCartMax'];\n    properties.forEach(function (property) {\n      if (!Number.isFinite(cords[property])) {\n        throw \"Error with \" + property + \" cord, its value is: \" + cords[property];\n      }\n    });\n    properties.forEach(function (property) {\n      this.cords[property] = cords[property];\n    }.bind(this));\n  };\n\n  Fractal.prototype.setMaxEscapeTime = function (maxEscapeTime) {\n    if (maxEscapeTime > 1792) {\n      this.maxEscapeTime = 1792;\n    } else if (maxEscapeTime < 14) {\n      this.maxEscapeTime = 14;\n    } else {\n      this.maxEscapeTime = Math.floor(maxEscapeTime / 7) * 7;\n    }\n  };\n\n  Fractal.prototype.zoomInPxPoint = function (pxPoint) {\n    var zoomMultiple = 0.2;\n    this.determineZoomPxCords(zoomMultiple, pxPoint);\n  };\n\n  Fractal.prototype.zoomOutPxPoint = function (pxPoint) {\n    var zoomMultiple = 5;\n    this.determineZoomPxCords(zoomMultiple, pxPoint);\n  };\n\n  Fractal.prototype.zoomInPxBox = function (pxCords) {\n    this.convertPxCordsToCartCords(pxCords);\n  };\n\n  Fractal.prototype.determineZoomPxCords = function (zoomMultiple, pxPoint) {\n    var diffPxWidth = Math.floor(this.canvas.width * (zoomMultiple / 2));\n    var diffPxHeight = Math.floor(this.canvas.height * (zoomMultiple / 2));\n    var pxCords = {\n      xPxMin: pxPoint.xPx - diffPxWidth,\n      xPxMax: pxPoint.xPx + diffPxWidth,\n      yPxMin: pxPoint.yPx - diffPxHeight,\n      yPxMax: pxPoint.yPx + diffPxHeight\n    };\n    this.convertPxCordsToCartCords(pxCords);\n  };\n\n  Fractal.prototype.convertPxCordsToCartCords = function (pxCords) {\n    var newCartCords = {\n      xCartMin: this.pixelToCartX(pxCords.xPxMin),\n      xCartMax: this.pixelToCartX(pxCords.xPxMax),\n      yCartMin: this.pixelToCartY(pxCords.yPxMin),\n      yCartMax: this.pixelToCartY(pxCords.yPxMax)\n    };\n    this.setCords(newCartCords);\n  };\n\n  Fractal.prototype.setStartingOptions = function () {\n    this.startCords = JSON.parse(JSON.stringify(this.cords));\n    this.startMaxEscapeTime = this.maxEscapeTime;\n  };\n\n  Fractal.prototype.alignCordsToCanvasRatio = function () {\n    var ctWidth = this.cords.xCartMax - this.cords.xCartMin;\n    var ctHeight = this.cords.yCartMax - this.cords.yCartMin;\n    var pxWidth = this.canvas.width;\n    var pxHeight = this.canvas.height;\n    if (ctHeight / ctWidth === pxHeight / pxWidth) return;\n\n    if (ctHeight / ctWidth < pxHeight / pxWidth) {\n      var oldCtHeight = ctHeight;\n      ctHeight = ctWidth * (pxHeight / pxWidth);\n      var diff = ctHeight - oldCtHeight;\n      this.cords.yCartMax += diff / 2;\n      this.cords.yCartMin -= diff / 2;\n    } else {\n      var oldCtWidth = ctWidth;\n      ctWidth = ctHeight * (pxWidth / pxHeight);\n      diff = ctWidth - oldCtWidth;\n      this.cords.xCartMax += diff / 2;\n      this.cords.xCartMin -= diff / 2;\n    }\n  };\n\n  Fractal.prototype.pixelToCartX = function (x) {\n    var pxRatio = x / this.canvas.width;\n    var cartWidth = this.cords.xCartMax - this.cords.xCartMin;\n    return this.cords.xCartMin + cartWidth * pxRatio;\n  };\n\n  Fractal.prototype.pixelToCartY = function (y) {\n    var pxRatio = y / this.canvas.height;\n    var cartHeight = this.cords.yCartMax - this.cords.yCartMin;\n    return this.cords.yCartMin + cartHeight * pxRatio;\n  };\n\n  Fractal.prototype.draw = function () {\n    var imageData = this.drawToImageData();\n    this.ctx.putImageData(imageData, 0, 0); // use the following to print size on canvas for debugging\n    // var fontSize = 1.25 * devicePixelRatio;\n    // this.ctx.font=\"300 \" + fontSize + \"em Helvetica\";\n    // this.ctx.fillStyle = \"#c0c0c0\";\n    // this.ctx.fillText(\"w: \" + imageData.width + \" h: \" + imageData.height, 75 * devicePixelRatio, 165 * devicePixelRatio);\n  };\n\n  Fractal.prototype.drawToImageData = function () {\n    var imageData = new ImageData(this.canvas.width, this.canvas.height);\n    var yCart, xCart, escapeTime, rgbNum, index;\n\n    for (var y = 0; y < imageData.height; y++) {\n      yCart = this.pixelToCartY(y);\n\n      for (var x = 0; x < imageData.width; x++) {\n        xCart = this.pixelToCartX(x);\n        escapeTime = this.calcEscapeTime(xCart, yCart);\n        rgbNum = this.rgbNum(escapeTime); // debugging console log\n        // console.log(x + \", \" + y + \" - \" + Math.round(xCart * 100) / 100 + \", \" + Math.round(yCart * 100) / 100 + \" - \" + escapeTime + \" - \" + rgbNum[0] + \", \" + rgbNum[1] + \", \" + rgbNum[2]);\n\n        index = (y * imageData.width + x) * 4;\n        imageData.data[index] = rgbNum[0];\n        imageData.data[index + 1] = rgbNum[1];\n        imageData.data[index + 2] = rgbNum[2];\n        imageData.data[index + 3] = 255;\n      }\n    }\n\n    console.log(\"max escape time: \" + this.maxEscapeTime);\n    console.log(\"cords: \", this.cords);\n    console.log(\"pixels: width: \" + imageData.width + \", height: \" + imageData.height);\n    console.log(\"done drawToImageData\");\n    return imageData;\n  };\n\n  Fractal.prototype.calcEscapeTime = function (xCart, yCart) {\n    var escapeTime = 0;\n    var oldX = xCart;\n    var oldY = yCart;\n    var newX, newY;\n\n    while (this.distFromOrigin(oldX, oldY) < 2 && escapeTime < this.maxEscapeTime) {\n      newX = oldX * oldX - oldY * oldY + xCart;\n      newY = 2 * oldX * oldY + yCart;\n      oldX = newX;\n      oldY = newY;\n      escapeTime += 1;\n    }\n\n    return escapeTime;\n  };\n\n  Fractal.prototype.distFromOrigin = function (x, y) {\n    return Math.sqrt(x * x + y * y);\n  }; ///////////////////////////////////////////////////////////////////////////////\n  //coloring algorithim:\n  //start with 2 of the 3 red, green and blue values fixed at either 0 or 255,\n  //then increase the other R, G or B value in a given number of increments\n  //repeat this for seven cases and you get a maximum of 1792 colors (7*256)\n  //note that white repeats 3 times, at the end of cases 2, 4 and 6\n  //the seven case are:\n  //case 0: R=0, B=0, increase green from 0 to 255\n  //case 1: R=0 G=255, increase blue from 0 to 255\n  //case 2: G=255, B=255, increase red form 0 to 255\n  //case 3: G=0, B=255, increase red from 0 to 255\n  //case 4: R=255, B=255, increase green from 0 to 255\n  //case 5: R=255, B=0, increase green from 0 to 255\n  //case 6: R=255, G=255, increase blue from 0 to 255\n  ///////////////////////////////////////////////////////////////////////////////\n\n\n  Fractal.prototype.rgbNum = function (escapeTime) {\n    if (escapeTime <= 2) {\n      return [0, 0, 0];\n    } else if (escapeTime === this.maxEscapeTime) {\n      return [0, 25, 0];\n    }\n\n    var redNum;\n    var greenNum;\n    var blueNum;\n    var rgbIncrements = Math.floor(this.maxEscapeTime / 7);\n    var caseNum = Math.floor(escapeTime / rgbIncrements);\n    var remainNum = escapeTime % rgbIncrements;\n\n    switch (caseNum) {\n      case 0:\n        redNum = 0;\n        greenNum = Math.floor(256 / rgbIncrements) * remainNum;\n        blueNum = 0;\n        break;\n\n      case 1:\n        redNum = 0;\n        greenNum = 255;\n        blueNum = Math.floor(256 / rgbIncrements) * remainNum;\n        break;\n\n      case 2:\n        redNum = Math.floor(256 / rgbIncrements) * remainNum;\n        greenNum = 255;\n        blueNum = 255;\n        break;\n\n      case 3:\n        redNum = Math.floor(256 / rgbIncrements) * remainNum;\n        greenNum = 0;\n        blueNum = 255;\n        break;\n\n      case 4:\n        redNum = 255;\n        greenNum = Math.floor(256 / rgbIncrements) * remainNum;\n        blueNum = 255;\n        break;\n\n      case 5:\n        redNum = 255;\n        greenNum = Math.floor(256 / rgbIncrements) * remainNum;\n        blueNum = 0;\n        break;\n\n      case 6:\n        redNum = 255;\n        greenNum = 255;\n        blueNum = Math.floor(256 / rgbIncrements) * remainNum;\n        break;\n    }\n\n    return [redNum, greenNum, blueNum];\n  };\n})();","map":{"version":3,"sources":["C:/Users/Matt/Desktop/IM_Web/IM_FracWebV1.0/src/components/app/fractalApp.js"],"names":["window","mandelbrotFractal","Fractal","canvas","ctx","getContext","cords","maxEscapeTime","startCords","startMaxEscapeTime","setToDefaults","alignCordsToCanvasRatio","prototype","update","options","previousSettings","copyCurrentSettings","defaults","resetToDefaultCords","resetCords","setCords","resetMaxEscapeTime","setMaxEscapeTime","zoomInPxPoint","zoomOutPxPoint","zoomInPxBox","setAsStartingOptions","setStartingOptions","pxWidth","Math","floor","width","pxHeight","height","distortion","reDrawRequired","draw","JSON","parse","stringify","canvasWidth","canvasHeight","xCartMin","xCartMax","yCartMin","yCartMax","properties","forEach","property","Number","isFinite","bind","pxPoint","zoomMultiple","determineZoomPxCords","pxCords","convertPxCordsToCartCords","diffPxWidth","diffPxHeight","xPxMin","xPx","xPxMax","yPxMin","yPx","yPxMax","newCartCords","pixelToCartX","pixelToCartY","ctWidth","ctHeight","oldCtHeight","diff","oldCtWidth","x","pxRatio","cartWidth","y","cartHeight","imageData","drawToImageData","putImageData","ImageData","yCart","xCart","escapeTime","rgbNum","index","calcEscapeTime","data","console","log","oldX","oldY","newX","newY","distFromOrigin","sqrt","redNum","greenNum","blueNum","rgbIncrements","caseNum","remainNum"],"mappings":"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","sourcesContent":["// https://github.com/rafgraph/fractal\r\n// this code may be freely distributed under the GNU GPL v3 copyleft licence\r\n\r\n(function(){\r\n  'use strict';\r\n\r\n  if (typeof window.mandelbrotFractal == \"undefined\") {\r\n    window.mandelbrotFractal = {};\r\n  }\r\n  window.mandelbrotFractal.Fractal = Fractal;\r\n  \r\n  function Fractal(canvas){\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext(\"2d\");\r\n    this.cords = {};\r\n    this.maxEscapeTime = 0;\r\n    this.startCords = {};\r\n    this.startMaxEscapeTime = 0;\r\n    this.setToDefaults();\r\n    this.alignCordsToCanvasRatio();\r\n  }\r\n\r\n\r\n  Fractal.prototype.update = function(options){\r\n    var previousSettings = this.copyCurrentSettings();\r\n\r\n    if (options.defaults) this.setToDefaults(); // true/false\r\n    if (options.resetToDefaultCords) this.resetToDefaultCords(); // true/false\r\n    if (options.resetCords) this.setCords(this.startCords); // true/false\r\n    if (options.cords) this.setCords(options.cords);\r\n    if (options.resetMaxEscapeTime) this.setMaxEscapeTime(this.startMaxEscapeTime); // true/false\r\n    if (options.maxEscapeTime) this.setMaxEscapeTime(options.maxEscapeTime);\r\n    if (options.zoomInPxPoint) this.zoomInPxPoint(options.zoomInPxPoint);\r\n    if (options.zoomOutPxPoint) this.zoomOutPxPoint(options.zoomOutPxPoint);\r\n    if (options.zoomInPxBox) this.zoomInPxBox(options.zoomInPxBox);\r\n    if (options.setAsStartingOptions) this.setStartingOptions(); // true/false\r\n    if (options.pxWidth && Math.floor(options.pxWidth) !== this.canvas.width)\r\n      this.canvas.width = options.pxWidth;\r\n    if (options.pxHeight && Math.floor(options.pxHeight) !== this.canvas.height)\r\n      this.canvas.height = options.pxHeight;\r\n    if (!options.distortion) this.alignCordsToCanvasRatio(); // by default this will run\r\n    if (this.reDrawRequired(previousSettings)) this.draw();\r\n  };\r\n\r\n\r\n  Fractal.prototype.copyCurrentSettings = function(){\r\n    return {\r\n      cords: JSON.parse(JSON.stringify(this.cords)),\r\n      maxEscapeTime: this.maxEscapeTime,\r\n      canvasWidth: this.canvas.width,\r\n      canvasHeight: this.canvas.height\r\n    };\r\n  };\r\n\r\n\r\n  Fractal.prototype.reDrawRequired = function(previousSettings){\r\n    if (\r\n      previousSettings.maxEscapeTime === this.maxEscapeTime &&\r\n      previousSettings.canvasWidth === this.canvas.width &&\r\n      previousSettings.canvasHeight === this.canvas.height &&\r\n      previousSettings.cords.xCartMin === this.cords.xCartMin &&\r\n      previousSettings.cords.xCartMax === this.cords.xCartMax &&\r\n      previousSettings.cords.yCartMin === this.cords.yCartMin &&\r\n      previousSettings.cords.yCartMax === this.cords.yCartMax\r\n    ) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n\r\n  Fractal.prototype.setToDefaults = function(){\r\n    this.resetToDefaultCords();\r\n    this.maxEscapeTime = 224;\r\n    this.setStartingOptions();\r\n  };\r\n\r\n\r\n  Fractal.prototype.resetToDefaultCords = function(){\r\n    this.setCords({\r\n      xCartMin: -2.1,\r\n      xCartMax: 0.8,\r\n      yCartMin: -1.2,\r\n      yCartMax: 1.2\r\n    });\r\n    this.startCords = JSON.parse(JSON.stringify(this.cords));\r\n  };\r\n\r\n\r\n  Fractal.prototype.setCords = function(cords){\r\n    var properties = ['xCartMin', 'xCartMax', 'yCartMin', 'yCartMax'];\r\n\r\n    properties.forEach(function(property){\r\n      if (!Number.isFinite(cords[property])) {\r\n        throw \"Error with \" + property + \" cord, its value is: \" + cords[property];\r\n      }\r\n    });\r\n\r\n    properties.forEach(function(property){\r\n      this.cords[property] = cords[property];\r\n    }.bind(this));\r\n  };\r\n\r\n\r\n  Fractal.prototype.setMaxEscapeTime = function(maxEscapeTime){\r\n    if (maxEscapeTime > 1792) {\r\n      this.maxEscapeTime = 1792;\r\n    } else if (maxEscapeTime < 14) {\r\n      this.maxEscapeTime = 14;\r\n    } else {\r\n      this.maxEscapeTime = Math.floor(maxEscapeTime / 7) * 7;\r\n    }\r\n  };\r\n\r\n\r\n  Fractal.prototype.zoomInPxPoint = function(pxPoint) {\r\n    var zoomMultiple = 0.2;\r\n    this.determineZoomPxCords(zoomMultiple, pxPoint);\r\n  };\r\n\r\n\r\n  Fractal.prototype.zoomOutPxPoint = function(pxPoint) {\r\n    var zoomMultiple = 5;\r\n    this.determineZoomPxCords(zoomMultiple, pxPoint);\r\n  };\r\n\r\n\r\n  Fractal.prototype.zoomInPxBox = function(pxCords) {\r\n    this.convertPxCordsToCartCords(pxCords);\r\n  };\r\n\r\n\r\n  Fractal.prototype.determineZoomPxCords = function(zoomMultiple, pxPoint){\r\n    var diffPxWidth = Math.floor(this.canvas.width * (zoomMultiple / 2));\r\n    var diffPxHeight = Math.floor(this.canvas.height * (zoomMultiple / 2));\r\n\r\n    var pxCords = {\r\n      xPxMin: pxPoint.xPx - diffPxWidth,\r\n      xPxMax: pxPoint.xPx + diffPxWidth,\r\n      yPxMin: pxPoint.yPx - diffPxHeight,\r\n      yPxMax: pxPoint.yPx + diffPxHeight\r\n    };\r\n\r\n    this.convertPxCordsToCartCords(pxCords);\r\n  };\r\n\r\n\r\n  Fractal.prototype.convertPxCordsToCartCords = function(pxCords){\r\n    var newCartCords = {\r\n      xCartMin: this.pixelToCartX(pxCords.xPxMin),\r\n      xCartMax: this.pixelToCartX(pxCords.xPxMax),\r\n      yCartMin: this.pixelToCartY(pxCords.yPxMin),\r\n      yCartMax: this.pixelToCartY(pxCords.yPxMax)\r\n    };\r\n\r\n    this.setCords(newCartCords);\r\n  };\r\n\r\n\r\n  Fractal.prototype.setStartingOptions = function(){\r\n    this.startCords = JSON.parse(JSON.stringify(this.cords));\r\n    this.startMaxEscapeTime = this.maxEscapeTime;\r\n  };\r\n\r\n\r\n  Fractal.prototype.alignCordsToCanvasRatio = function() {\r\n    var ctWidth = this.cords.xCartMax - this.cords.xCartMin;\r\n    var ctHeight = this.cords.yCartMax - this.cords.yCartMin;\r\n    var pxWidth = this.canvas.width;\r\n    var pxHeight = this.canvas.height;\r\n    if (ctHeight / ctWidth === pxHeight / pxWidth) return;\r\n\r\n    if (ctHeight / ctWidth < pxHeight / pxWidth) {\r\n      var oldCtHeight = ctHeight;\r\n      ctHeight = ctWidth * (pxHeight / pxWidth);\r\n      var diff = ctHeight - oldCtHeight;\r\n      this.cords.yCartMax += diff / 2;\r\n      this.cords.yCartMin -= diff / 2;\r\n    } else {\r\n      var oldCtWidth = ctWidth;\r\n      ctWidth = ctHeight * (pxWidth / pxHeight);\r\n      diff = ctWidth - oldCtWidth;\r\n      this.cords.xCartMax += (diff / 2);\r\n      this.cords.xCartMin -= (diff / 2);\r\n    }\r\n  };\r\n\r\n\r\n  Fractal.prototype.pixelToCartX = function(x){\r\n    var pxRatio = x / this.canvas.width;\r\n    var cartWidth = this.cords.xCartMax - this.cords.xCartMin;\r\n    return this.cords.xCartMin + (cartWidth * pxRatio);\r\n  };\r\n\r\n\r\n  Fractal.prototype.pixelToCartY = function(y){\r\n    var pxRatio = y / this.canvas.height;\r\n    var cartHeight = this.cords.yCartMax - this.cords.yCartMin;\r\n    return this.cords.yCartMin + (cartHeight * pxRatio);\r\n  };\r\n\r\n\r\n  Fractal.prototype.draw = function(){\r\n    var imageData = this.drawToImageData();\r\n    this.ctx.putImageData(imageData, 0, 0);\r\n\r\n    // use the following to print size on canvas for debugging\r\n    // var fontSize = 1.25 * devicePixelRatio;\r\n    // this.ctx.font=\"300 \" + fontSize + \"em Helvetica\";\r\n    // this.ctx.fillStyle = \"#c0c0c0\";\r\n    // this.ctx.fillText(\"w: \" + imageData.width + \" h: \" + imageData.height, 75 * devicePixelRatio, 165 * devicePixelRatio);\r\n  };\r\n\r\n\r\n  Fractal.prototype.drawToImageData = function(){\r\n    var imageData = new ImageData(this.canvas.width, this.canvas.height);\r\n    var yCart, xCart, escapeTime, rgbNum, index;\r\n\r\n    for (var y = 0; y < imageData.height; y++){\r\n      yCart = this.pixelToCartY(y);\r\n\r\n      for (var x = 0; x < imageData.width; x++){\r\n        xCart = this.pixelToCartX(x);\r\n        escapeTime = this.calcEscapeTime(xCart, yCart);\r\n\r\n        rgbNum = this.rgbNum(escapeTime);\r\n\r\n        // debugging console log\r\n        // console.log(x + \", \" + y + \" - \" + Math.round(xCart * 100) / 100 + \", \" + Math.round(yCart * 100) / 100 + \" - \" + escapeTime + \" - \" + rgbNum[0] + \", \" + rgbNum[1] + \", \" + rgbNum[2]);\r\n\r\n        index = (y * imageData.width + x) * 4;\r\n        imageData.data[index] = rgbNum[0];\r\n        imageData.data[index + 1] = rgbNum[1];\r\n        imageData.data[index + 2] = rgbNum[2];\r\n        imageData.data[index + 3] = 255;\r\n      }\r\n    }\r\n\r\n    console.log(\"max escape time: \" + this.maxEscapeTime);\r\n    console.log(\"cords: \", this.cords);\r\n    console.log(\"pixels: width: \" + imageData.width + \", height: \" +imageData.height);\r\n    console.log(\"done drawToImageData\");\r\n    return imageData;\r\n  };\r\n\r\n\r\n  Fractal.prototype.calcEscapeTime = function(xCart, yCart){\r\n\r\n    var escapeTime = 0;\r\n    var oldX = xCart;\r\n    var oldY = yCart;\r\n    var newX, newY;\r\n\r\n    while (this.distFromOrigin(oldX, oldY) < 2 && escapeTime < this.maxEscapeTime) {\r\n      newX = (oldX * oldX) - (oldY * oldY) + xCart;\r\n      newY = (2 * oldX * oldY) + yCart;\r\n\r\n      oldX = newX;\r\n      oldY = newY;\r\n\r\n      escapeTime += 1;\r\n    }\r\n\r\n    return escapeTime;\r\n  };\r\n\r\n\r\n  Fractal.prototype.distFromOrigin = function(x, y){\r\n    return Math.sqrt(x * x + y * y);\r\n  };\r\n\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////\r\n  //coloring algorithim:\r\n  //start with 2 of the 3 red, green and blue values fixed at either 0 or 255,\r\n  //then increase the other R, G or B value in a given number of increments\r\n  //repeat this for seven cases and you get a maximum of 1792 colors (7*256)\r\n  //note that white repeats 3 times, at the end of cases 2, 4 and 6\r\n  //the seven case are:\r\n  //case 0: R=0, B=0, increase green from 0 to 255\r\n  //case 1: R=0 G=255, increase blue from 0 to 255\r\n  //case 2: G=255, B=255, increase red form 0 to 255\r\n  //case 3: G=0, B=255, increase red from 0 to 255\r\n  //case 4: R=255, B=255, increase green from 0 to 255\r\n  //case 5: R=255, B=0, increase green from 0 to 255\r\n  //case 6: R=255, G=255, increase blue from 0 to 255\r\n  ///////////////////////////////////////////////////////////////////////////////\r\n\r\n  Fractal.prototype.rgbNum = function(escapeTime){\r\n    if (escapeTime <= 2) {\r\n      return [0, 0, 0];\r\n    } else if (escapeTime === this.maxEscapeTime) {\r\n      return [0, 25, 0];\r\n    }\r\n\r\n    var redNum;\r\n    var greenNum;\r\n    var blueNum;\r\n    var rgbIncrements = Math.floor(((this.maxEscapeTime) / 7));\r\n    var caseNum = Math.floor(escapeTime / rgbIncrements);\r\n    var remainNum = escapeTime % rgbIncrements;\r\n\r\n    switch (caseNum) {\r\n      case 0:\r\n        redNum = 0;\r\n        greenNum = Math.floor(256 / rgbIncrements) * remainNum;\r\n        blueNum = 0;\r\n        break;\r\n      case 1:\r\n        redNum = 0;\r\n        greenNum = 255;\r\n        blueNum = Math.floor(256 / rgbIncrements) * remainNum;\r\n        break;\r\n      case 2:\r\n        redNum = Math.floor(256 / rgbIncrements) * remainNum;\r\n        greenNum = 255;\r\n        blueNum = 255;\r\n        break;\r\n      case 3:\r\n        redNum = Math.floor(256 / rgbIncrements) * remainNum;\r\n        greenNum = 0;\r\n        blueNum = 255;\r\n        break;\r\n      case 4:\r\n        redNum = 255;\r\n        greenNum = Math.floor(256 / rgbIncrements) * remainNum;\r\n        blueNum = 255;\r\n        break;\r\n      case 5:\r\n        redNum = 255;\r\n        greenNum = Math.floor(256 / rgbIncrements) * remainNum;\r\n        blueNum = 0;\r\n        break;\r\n      case 6:\r\n        redNum = 255;\r\n        greenNum = 255;\r\n        blueNum = Math.floor(256 / rgbIncrements) * remainNum;\r\n        break;\r\n    }\r\n\r\n    return [redNum, greenNum, blueNum];\r\n  };\r\n\r\n})();\r\n"]},"metadata":{},"sourceType":"module"}